import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import core.symbol.SymbolTable;
import core.symbol.SymbolType;
import core.symbol.Symbol;

parser code {:


    private SymbolTable symbolTable = new SymbolTable();

    public SymbolTable getSymbolTable() {
        return symbolTable;
    }

    public void report_error(String message, Object info) {
        //add a small delay to see the error message
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        StringBuilder m = new StringBuilder("Error");
        if (info != null && info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s != null && s.left >= 0) { // Ensure s is not null
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) { // Safely access s.right
                    m.append(", column " + (s.right + 1));
                }
        }
        } else if (info == null) {
            m.append(" : Null info object");
        } else if (info instanceof core.symbol.Symbol){
            core.symbol.Symbol s = (core.symbol.Symbol) info;
            m.append(" : " + s.getName() + " := " + s.getValue());
        }
        m.append(" : " + message);
        System.err.println(m);
    }

   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/** Terminals */

terminal           AND, OR, NOT, TRUE, FALSE, SUPTRUE, SUPFALSE; // boolean

// flow
terminal           BEGIN, END, EXIT; 
terminal           IF, THEN, ELSE; 
terminal           WHILE, DO; 

terminal           PRINT, READINT, LENGTH, POSITION, READSTR, CONCATENATE, SUBSTRING, FILEOUT;  // commands
terminal           ASSIGN; 
terminal   	       EQ, LT, LE, GT, GE, NE; // num_rel
terminal    	   STREQ, STRNOTEQ; //str_rel

terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, MODE, LPAREN, RPAREN, INCREMENT, DECREMENT;
terminal Integer   NUM;
terminal String    IDENT;
terminal String    STRING;

//Vars
terminal           BOOLEAN;
terminal           INTEGER;
terminal           CONST;
terminal           TUP;

terminal           FUNC;
terminal           ENDFUNC;
terminal           MAIN;



/** Non-terminals **/
non terminal Expr expr;
non terminal Expr num_expr;
non terminal Expr str_expr;
non terminal Expr cond_expr;
non terminal Expr bool_expr;
non terminal Expr tuple_expr;
non terminal Expr const_expr;


non terminal Operator num_op;
non terminal Condition num_rel;
non terminal Condition str_rel;

non terminal SimpleInstruction instruction;
non terminal SimpleInstruction simple_instr;
non terminal InstructionList instructions;

non terminal SimpleInstruction assign_stat;
non terminal SimpleInstruction if_stat;
non terminal SimpleInstruction while_stat;
non terminal SimpleInstruction output_stat;
non terminal SimpleInstruction fileoutput_stat;
non terminal Main program;
non terminal MainInstructionList main_instr;

non terminal List<Function> function_list;
non terminal Function function;

/** Precedence */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODE; 

precedence left OR, AND;
precedence left NOT;

precedence left ELSE;

start with program;

/** ============= GRAMMAR ============= */

/** done */

//Operadores
num_op ::= PLUS             {: RESULT = new PlusOperator(); :}
         | MINUS            {: RESULT = new MinusOperator(); :}
         | TIMES            {: RESULT = new TimesOperator(); :}
         | DIVIDE           {: RESULT = new DivideOperator(); :}
         | MODE             {: RESULT = new ModeOperator(); :}
         ;

//Expresiones:
/* 
    Pueden ser: un ID, un numero, un booleano (true o false) o una tupla
*/
expr ::= IDENT:i            {: RESULT = new ID(i); :}
            |num_expr:e     {: RESULT = e; :}
            |str_expr:e     {: RESULT = e; :}
            |bool_expr:e    {: RESULT = e; :} 
            |tuple_expr:e          {: RESULT = e; :} 
            ;

//Tupla
tuple_expr ::= LPAREN expr:e COMMA expr:e2 RPAREN
                {:
                    RESULT = new TupleExpression(e, e2);
                :}
            ;

//Constantes
const_expr ::= NUM:e
                {:
                    RESULT = new ConstIntExpression(e.intValue());
                :}
            | STRING:s
                {:
                    RESULT = new ConstStringExpression(s.substring(1, s.length()-1));
                :}
            | TRUE
                {:
                    RESULT = new ConstBooleanExpression(true);
                :}
            | FALSE
                {:
                    RESULT = new ConstBooleanExpression(false);
                :}
            ;

//Expresiones booleanas
// z := true o z := false
bool_expr ::= TRUE          {: RESULT = new BoolExpression2(true); :}
            | FALSE         {: RESULT = new BoolExpression2(false); :}
            ;

//Expresiones numéricas
num_expr ::=  NUM:e
                {:
                    RESULT = new IntExpression(e.intValue());
                :}
            | READINT
                 {:
                    RESULT = new IntEnterExpression();
                 :}
            | MINUS expr:e
                {:
                    RESULT = new UMinusExpression(e);
                :}
            | LPAREN expr:e RPAREN
                {:
                    RESULT = new PIntExpression(e);
                :}
            | LENGTH LPAREN expr:e RPAREN
                {:
                    RESULT = new STRLengthExpression(e);
                :}
            | POSITION LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new STRPositionExpression(s, s2);
                :}
            | expr:e num_op:o expr:e2
                {:
                    RESULT = new OperatorExpression(e, o, e2);
                :}               
            | INCREMENT expr:i      {: RESULT = new PreIncrementExpression(i); :}
            | DECREMENT expr:i      {: RESULT = new PreDecrementExpression(i); :}
            ;

// Strings
str_expr ::=  STRING:s
                {:
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                :}
             | READSTR
                {:
                    RESULT = new StrEnterExpression();
                :}
            | CONCATENATE LPAREN expr:s COMMA expr:s2 RPAREN
                {:
                    RESULT = new ConcatStringExpression(s, s2);
                :}
              | SUBSTRING LPAREN expr:s COMMA expr:pos COMMA expr:length RPAREN
                {:
                    RESULT = new SubStringExpression(s, pos, length);
                :}
             ;

//Relaciones numéricas o booleanas (=, <>, <, >, <= >=)
num_rel ::=   EQ         {: RESULT = new EqCond(); :}
            | LT         {: RESULT = new LtCond(); :}
            | LE         {: RESULT = new LeCond(); :}
            | GT         {: RESULT = new GtCond(); :}
            | GE         {: RESULT = new GeCond(); :}
            | NE         {: RESULT = new NeCond(); :}
            ;

// Relaciones SOLO STRINGS (==, !=)
str_rel ::= STREQ     {: RESULT = new StrEqCond(); :}
          | STRNOTEQ  {: RESULT = new StrNotEqCond(); :}
          ; 

// Condiciones booleanas
/* 
Ejemplo: Esto sería lo que hay dentro de un if: if (z = 5), se mete en el ConditionBooleanExpression
z sería la expr, = sería el num_rel y 5 sería la expr2
z es un ID.
5 es un NUM que pertenece a num_expression.
*/
cond_expr ::= SUPTRUE                               {: RESULT = new BooleanExpression(true); :}
            | SUPFALSE                              {: RESULT = new BooleanExpression(false); :}
            | LPAREN cond_expr:e RPAREN          {: RESULT = new PBooleanExpression(e); :}
            | NOT cond_expr:e                    {: RESULT = new NegationBooleanExpression(e); :}
            | cond_expr:e AND cond_expr:e2       {: RESULT = new AndBooleanExpression(e, e2); :}
            | cond_expr:e OR cond_expr:e2        {: RESULT = new OrBooleanExpression(e, e2); :}
            | expr:e num_rel:o expr:e2           {: RESULT = new ConditionBooleanExpression(e, o, e2); :}
            | expr:s str_rel:o expr:s2           {: RESULT = new ConditionBooleanExpression(s, o, s2); :}
            ;

simple_instr ::= assign_stat:si SEMI                  {: RESULT = si; :}
               | output_stat:si SEMI                  {: RESULT = si; :}
               | fileoutput_stat:si SEMI              {: RESULT = si; :}
               | EXIT SEMI                            {: System.exit(0); :}
               ;

instruction ::= if_stat:si                      {: RESULT = si; :}
                | while_stat:si                   {: RESULT = si; :}
                | simple_instr:si               {: RESULT = si; :}
                ;

instructions ::= instructions:i instruction:si           {: i.add(si); RESULT = i; :}
        | instruction:si                        {: RESULT = new InstructionList(si); :}
        ;

assign_stat ::= INTEGER IDENT:i ASSIGN num_expr:e          {: 
        // Aquí obtenemos el tipo del símbolo basado en la expresión
        SymbolType type;
        if (e instanceof IntExpression) {
            type = SymbolType.INTEGER;
        } else {
            type = SymbolType.OTHER;
        }       
        // Añadir el símbolo a la tabla
        symbolTable.put(i, e, type, false);

        RESULT = new AssignInstruction(i, e); 
    :}
    | BOOLEAN IDENT:i ASSIGN bool_expr:e           {: 
        // En este caso, aseguramos que sea una expresión booleana válida
        SymbolType type;
        if (e instanceof BoolExpression2 || e instanceof BooleanExpression) {
            type = SymbolType.BOOLEAN;
        } else {
            report_error("Invalid boolean assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false);

        RESULT = new AssignInstruction(i, e); 

    :}
    | TUP IDENT:i ASSIGN tuple_expr:e         {:

        SymbolType type;
        if (e instanceof TupleExpression) {
            type = SymbolType.TUPLE;
        } else {
            report_error("Invalid tuple assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false);
        
        RESULT = new AssignInstruction(i, e);
    :}
    | CONST IDENT:i ASSIGN const_expr:e          {:
        // Comprobar si el identificador existe en la tabla de símbolos
        Symbol symbol = symbolTable.get(i.toString());
        if (symbol != null && symbol.isConstant()) {
            // Si ya existe, lanzar un error indicando que la constante ya fue definida
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        } else {
            // Si no existe, agregarlo a la tabla de símbolos como constante
            SymbolType type;
            if (e instanceof ConstIntExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstStringExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstBooleanExpression) {
                type = SymbolType.CONSTANT;
            } else {
                type = SymbolType.OTHER;
            }

            symbolTable.put(i.toString(), e, type, true);
        }
        RESULT = new AssignInstruction(i, e);

    :}
    | IDENT:i ASSIGN expr:e                   {:

    // ESTE VENDRÍA A SER UNA ASIGNACIÓN QUE NO TIENE VARIABLE
    // Comprobar si el identificador ya existe en la tabla de símbolos
    Symbol symbol = symbolTable.get(i);
    SymbolType type;

    if(e instanceof ID) {
        type = symbolTable.get(((ID) e).getName()).getType();
    } else if (e instanceof IntExpression) {
        type = SymbolType.INTEGER;
    } else if (e instanceof StringExpression) {
        type = SymbolType.STRING;
    } else if (e instanceof BooleanExpression || e instanceof BoolExpression2) {
        type = SymbolType.BOOLEAN;
    } else {
        type = SymbolType.OTHER;
    }

    if (symbol != null) {
        // Si el símbolo ya existe, comprobar si es constante
        if (symbol.isConstant()) {
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        }
        // Comprobar si el tipo del nuevo valor coincide con el tipo del símbolo existente
        if (symbol.getType() != type) {
            report_fatal_error("Type mismatch: cannot assign a value of type " + type + " to variable " + i + " of type " + symbol.getType() + ".", symbol);
            return null;
        }
        symbolTable.put(i,e,type,false);
        // Si el tipo coincide y no es constante, se permite la reasignación
    } else {
        // Si el símbolo no existe, agregarlo a la tabla de símbolos
        symbolTable.put(i, e, type, false);
    }

        RESULT = new AssignInstruction(i, e);
    :}
                ;

if_stat ::= IF cond_expr:c THEN BEGIN instructions:s ELSE instructions:s2 END SEMI   {:  RESULT = new IfElseInstruction(c, s, s2); :}
            | IF cond_expr:c THEN BEGIN instructions:s END SEMI                          {: RESULT = new IfInstruction(c, s); :}
            ;

while_stat ::= WHILE cond_expr:c DO BEGIN instructions:s END SEMI      {: RESULT = new WhileInstruction(c, s); :}
            | DO instructions:s WHILE cond_expr:c SEMI       {: RESULT = new DoWhileInstruction(c, s); :}
            ;

output_stat ::= PRINT LPAREN expr:e RPAREN               {: RESULT = new OutputInstruction(e); :}
            ;

fileoutput_stat ::= FILEOUT LPAREN expr:s COMMA expr:s2 RPAREN    {: RESULT = new FileOutputInstruction(s, s2); :}
            ;

function ::= FUNC IDENT:i LPAREN RPAREN BEGIN instructions:li ENDFUNC {: RESULT = new Function(li, i); :}
            ;

function_list ::= function_list:fl function:f {: fl.add(f); RESULT = fl; :}
                    | function:f {: RESULT = List.of(f); :}
                    ;

main_instr ::= FUNC MAIN BEGIN instructions:i END ENDFUNC
            {:
                RESULT = new MainInstructionList(i);  
            :}
            ;

program ::= main_instr:i function_list:fl
          {:
            RESULT = new Main(i, fl);  // Devuelve una instancia de Main
          :}
          | main_instr:i
          {:
                  RESULT = new Main(i);  // Devuelve una instancia de Main
          :}
          ;