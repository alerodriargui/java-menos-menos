
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import core.symbol.SymbolTable;
import core.symbol.SymbolType;
import core.symbol.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\007\007\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\006\003\000\002\006\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\006\000\002\003\010\000\002\003\005\000\002" +
    "\003\004\000\002\003\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\010\000\002\004\012\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\004\000\002\016\004\000\002\016\003\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\005\000\002\021\013\000\002\021\011\000\002" +
    "\022\011\000\002\022\007\000\002\023\006\000\002\024" +
    "\010\000\002\017\012\000\002\017\002\000\002\031\005" +
    "\000\002\031\003\000\002\026\006\000\002\032\005\000" +
    "\002\032\003\000\002\030\007\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\070\005\072\uffbc\001\002\000\004\002" +
    "\265\001\002\000\004\060\253\001\002\000\004\002\uffb5" +
    "\001\002\000\004\072\010\001\002\000\004\013\011\001" +
    "\002\000\030\015\012\016\022\021\015\022\023\023\031" +
    "\032\020\060\014\062\024\063\032\064\030\065\027\001" +
    "\002\000\004\044\252\001\002\000\032\014\251\015\012" +
    "\016\022\021\015\022\023\023\031\032\020\060\014\062" +
    "\024\063\032\064\030\065\027\001\002\000\006\033\242" +
    "\053\241\001\002\000\046\006\160\007\045\010\060\011" +
    "\162\012\163\024\064\025\057\026\054\027\053\030\063" +
    "\031\055\047\062\053\161\055\056\056\043\057\050\060" +
    "\041\061\052\001\002\000\036\014\uffcc\015\uffcc\016\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\032\uffcc\060\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\071\uffcc\001\002\000\004" +
    "\044\237\001\002\000\004\053\232\001\002\000\004\044" +
    "\231\001\002\000\046\006\160\007\045\010\060\011\162" +
    "\012\163\024\064\025\057\026\054\027\053\030\063\031" +
    "\055\047\062\053\161\055\056\056\043\057\050\060\041" +
    "\061\052\001\002\000\030\015\012\016\022\021\015\022" +
    "\023\023\031\032\020\060\014\062\024\063\032\064\030" +
    "\065\027\001\002\000\004\060\151\001\002\000\004\044" +
    "\150\001\002\000\036\014\uffce\015\uffce\016\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\032\uffce\060\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\071\uffce\001\002\000\004\060\143" +
    "\001\002\000\004\060\134\001\002\000\004\053\131\001" +
    "\002\000\004\060\037\001\002\000\036\014\uffc9\015\uffc9" +
    "\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\032\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\071\uffc9\001\002" +
    "\000\004\044\036\001\002\000\036\014\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\032\uffcd\060\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\071\uffcd\001\002\000" +
    "\036\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\032\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\071\uffd2\001\002\000\004\033\040\001\002\000\040" +
    "\007\045\010\060\024\064\025\057\026\054\027\053\030" +
    "\063\031\055\047\062\053\046\055\056\056\043\057\050" +
    "\060\041\061\052\001\002\000\052\004\ufffb\005\ufffb\017" +
    "\ufffb\022\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\054\ufffb\001\002\000\014" +
    "\046\072\047\073\050\076\051\074\052\071\001\002\000" +
    "\040\007\045\010\060\024\064\025\057\026\054\027\053" +
    "\030\063\031\055\047\062\053\046\055\056\056\043\057" +
    "\050\060\041\061\052\001\002\000\052\004\ufff7\005\ufff7" +
    "\017\ufff7\022\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\001\002\000" +
    "\052\004\ufff1\005\ufff1\017\ufff1\022\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\054\ufff1\001\002\000\040\007\045\010\060\024\064\025" +
    "\057\026\054\027\053\030\063\031\055\047\062\053\046" +
    "\055\056\056\043\057\050\060\041\061\052\001\002\000" +
    "\052\004\ufff8\005\ufff8\017\ufff8\022\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\054\ufff8\001\002\000\052\004\uffef\005\uffef\017\uffef\022" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\054\uffef\001\002\000\016\044\uffc8" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000" +
    "\052\004\uffe6\005\uffe6\017\uffe6\022\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\054\uffe6\001\002\000\052\004\uffe5\005\uffe5\017\uffe5\022" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\054\uffe5\001\002\000\004\053\116" +
    "\001\002\000\004\053\107\001\002\000\040\007\045\010" +
    "\060\024\064\025\057\026\054\027\053\030\063\031\055" +
    "\047\062\053\046\055\056\056\043\057\050\060\041\061" +
    "\052\001\002\000\004\053\103\001\002\000\052\004\ufff0" +
    "\005\ufff0\017\ufff0\022\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\001" +
    "\002\000\052\004\ufff9\005\ufff9\017\ufff9\022\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\054\ufff9\001\002\000\040\007\045\010\060\024" +
    "\064\025\057\026\054\027\053\030\063\031\055\047\062" +
    "\053\046\055\056\056\043\057\050\060\041\061\052\001" +
    "\002\000\004\053\065\001\002\000\052\004\uffee\005\uffee" +
    "\017\uffee\022\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\001\002\000" +
    "\040\007\045\010\060\024\064\025\057\026\054\027\053" +
    "\030\063\031\055\047\062\053\046\055\056\056\043\057" +
    "\050\060\041\061\052\001\002\000\016\045\070\046\072" +
    "\047\073\050\076\051\074\052\071\001\002\000\052\004" +
    "\ufffa\005\ufffa\017\ufffa\022\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\001\002\000\040\007\045\010\060\024\064\025\057\026" +
    "\054\027\053\030\063\031\055\047\062\053\046\055\056" +
    "\056\043\057\050\060\041\061\052\001\002\000\040\007" +
    "\ufffc\010\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\047\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\001\002\000\040\007\000\010\000\024\000" +
    "\025\000\026\000\027\000\030\000\031\000\047\000\053" +
    "\000\055\000\056\000\057\000\060\000\061\000\001\002" +
    "\000\040\007\uffff\010\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\047\uffff\053\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\001\002\000\040\007\ufffd\010" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\047\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\001\002\000\040\007\045\010\060\024\064\025\057" +
    "\026\054\027\053\030\063\031\055\047\062\053\046\055" +
    "\056\056\043\057\050\060\041\061\052\001\002\000\040" +
    "\007\ufffe\010\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\047\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\001\002\000\052\004\uffe9\005\uffe9\017" +
    "\uffe9\022\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\072\047" +
    "\073\050\076\051\074\052\071\054\uffe9\001\002\000\016" +
    "\046\072\047\073\050\076\051\074\052\071\054\101\001" +
    "\002\000\052\004\uffe4\005\uffe4\017\uffe4\022\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\054\uffe4\001\002\000\052\004\uffed\005\uffed\017" +
    "\uffed\022\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\076\051\074\052\071\054\uffed\001\002\000\040" +
    "\007\045\010\060\024\064\025\057\026\054\027\053\030" +
    "\063\031\055\047\062\053\046\055\056\056\043\057\050" +
    "\060\041\061\052\001\002\000\016\046\072\047\073\050" +
    "\076\051\074\052\071\054\105\001\002\000\052\004\uffeb" +
    "\005\uffeb\017\uffeb\022\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\001" +
    "\002\000\052\004\uffe8\005\uffe8\017\uffe8\022\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\072\047\073\050\076\051\074" +
    "\052\071\054\uffe8\001\002\000\040\007\045\010\060\024" +
    "\064\025\057\026\054\027\053\030\063\031\055\047\062" +
    "\053\046\055\056\056\043\057\050\060\041\061\052\001" +
    "\002\000\016\045\111\046\072\047\073\050\076\051\074" +
    "\052\071\001\002\000\040\007\045\010\060\024\064\025" +
    "\057\026\054\027\053\030\063\031\055\047\062\053\046" +
    "\055\056\056\043\057\050\060\041\061\052\001\002\000" +
    "\016\045\113\046\072\047\073\050\076\051\074\052\071" +
    "\001\002\000\040\007\045\010\060\024\064\025\057\026" +
    "\054\027\053\030\063\031\055\047\062\053\046\055\056" +
    "\056\043\057\050\060\041\061\052\001\002\000\016\046" +
    "\072\047\073\050\076\051\074\052\071\054\115\001\002" +
    "\000\052\004\uffe3\005\uffe3\017\uffe3\022\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\001\002\000\040\007\045\010\060\024\064" +
    "\025\057\026\054\027\053\030\063\031\055\047\062\053" +
    "\046\055\056\056\043\057\050\060\041\061\052\001\002" +
    "\000\016\045\120\046\072\047\073\050\076\051\074\052" +
    "\071\001\002\000\040\007\045\010\060\024\064\025\057" +
    "\026\054\027\053\030\063\031\055\047\062\053\046\055" +
    "\056\056\043\057\050\060\041\061\052\001\002\000\016" +
    "\046\072\047\073\050\076\051\074\052\071\054\122\001" +
    "\002\000\052\004\uffea\005\uffea\017\uffea\022\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\054\uffea\001\002\000\020\045\124\046\072\047" +
    "\073\050\076\051\074\052\071\054\125\001\002\000\040" +
    "\007\045\010\060\024\064\025\057\026\054\027\053\030" +
    "\063\031\055\047\062\053\046\055\056\056\043\057\050" +
    "\060\041\061\052\001\002\000\052\004\uffec\005\uffec\017" +
    "\uffec\022\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\054\uffec\001\002\000\016" +
    "\046\072\047\073\050\076\051\074\052\071\054\127\001" +
    "\002\000\052\004\ufff6\005\ufff6\017\ufff6\022\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\054\ufff6\001\002\000\052\004\uffe7\005\uffe7\017" +
    "\uffe7\022\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\072\047" +
    "\073\050\076\051\074\052\071\054\uffe7\001\002\000\040" +
    "\007\045\010\060\024\064\025\057\026\054\027\053\030" +
    "\063\031\055\047\062\053\046\055\056\056\043\057\050" +
    "\060\041\061\052\001\002\000\016\046\072\047\073\050" +
    "\076\051\074\052\071\054\133\001\002\000\004\044\uffbf" +
    "\001\002\000\004\033\135\001\002\000\012\007\141\010" +
    "\142\057\136\061\137\001\002\000\004\044\ufff5\001\002" +
    "\000\004\044\ufff4\001\002\000\004\044\uffc5\001\002\000" +
    "\004\044\ufff3\001\002\000\004\044\ufff2\001\002\000\004" +
    "\033\144\001\002\000\004\053\145\001\002\000\040\007" +
    "\045\010\060\024\064\025\057\026\054\027\053\030\063" +
    "\031\055\047\062\053\046\055\056\056\043\057\050\060" +
    "\041\061\052\001\002\000\004\044\uffc6\001\002\000\016" +
    "\045\124\046\072\047\073\050\076\051\074\052\071\001" +
    "\002\000\036\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\032\uffd1\060\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\071\uffd1\001\002\000\004\033\152\001\002" +
    "\000\006\007\045\010\060\001\002\000\004\044\uffc7\001" +
    "\002\000\030\015\012\016\022\021\155\022\023\023\031" +
    "\032\020\060\014\062\024\063\032\064\030\065\027\001" +
    "\002\000\046\006\160\007\045\010\060\011\162\012\163" +
    "\024\064\025\057\026\054\027\053\030\063\031\055\047" +
    "\062\053\161\055\056\056\043\057\050\060\041\061\052" +
    "\001\002\000\036\014\uffca\015\uffca\016\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\032\uffca\060\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\071\uffca\001\002\000\034\034\211\035" +
    "\202\036\205\037\204\040\210\041\203\042\213\043\207" +
    "\046\072\047\073\050\076\051\074\052\071\001\002\000" +
    "\046\006\160\007\045\010\060\011\162\012\163\024\064" +
    "\025\057\026\054\027\053\030\063\031\055\047\062\053" +
    "\161\055\056\056\043\057\050\060\041\061\052\001\002" +
    "\000\046\006\160\007\045\010\060\011\162\012\163\024" +
    "\064\025\057\026\054\027\053\030\063\031\055\047\062" +
    "\053\161\055\056\056\043\057\050\060\041\061\052\001" +
    "\002\000\016\004\uffda\005\uffda\017\uffda\022\uffda\044\uffda" +
    "\054\uffda\001\002\000\016\004\uffd9\005\uffd9\017\uffd9\022" +
    "\uffd9\044\uffd9\054\uffd9\001\002\000\012\004\166\005\170" +
    "\022\165\044\167\001\002\000\004\013\173\001\002\000" +
    "\046\006\160\007\045\010\060\011\162\012\163\024\064" +
    "\025\057\026\054\027\053\030\063\031\055\047\062\053" +
    "\161\055\056\056\043\057\050\060\041\061\052\001\002" +
    "\000\036\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\032\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\071\uffc0\001\002\000\046\006\160\007\045\010" +
    "\060\011\162\012\163\024\064\025\057\026\054\027\053" +
    "\030\063\031\055\047\062\053\161\055\056\056\043\057" +
    "\050\060\041\061\052\001\002\000\016\004\uffd5\005\uffd5" +
    "\017\uffd5\022\uffd5\044\uffd5\054\uffd5\001\002\000\016\004" +
    "\uffd6\005\uffd6\017\uffd6\022\uffd6\044\uffd6\054\uffd6\001\002" +
    "\000\030\015\012\016\022\021\015\022\023\023\031\032" +
    "\020\060\014\062\024\063\032\064\030\065\027\001\002" +
    "\000\032\014\175\015\012\016\022\021\015\022\023\023" +
    "\031\032\020\060\014\062\024\063\032\064\030\065\027" +
    "\001\002\000\004\044\176\001\002\000\036\014\uffc1\015" +
    "\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\032\uffc1" +
    "\060\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\001" +
    "\002\000\040\034\211\035\202\036\205\037\204\040\210" +
    "\041\203\042\213\043\207\045\124\046\072\047\073\050" +
    "\076\051\074\052\071\054\125\001\002\000\010\004\166" +
    "\005\170\054\201\001\002\000\016\004\uffd8\005\uffd8\017" +
    "\uffd8\022\uffd8\044\uffd8\054\uffd8\001\002\000\040\007\uffe1" +
    "\010\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\047\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\001\002\000\040\007\uffdd\010\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\047\uffdd\053\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002\000" +
    "\040\007\uffdf\010\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\047\uffdf\053\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\001\002\000\040\007\uffe0\010\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\047" +
    "\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\001\002\000\040\007\045\010\060\024\064\025\057\026" +
    "\054\027\053\030\063\031\055\047\062\053\046\055\056" +
    "\056\043\057\050\060\041\061\052\001\002\000\040\007" +
    "\uffdb\010\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\047\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\001\002\000\040\007\uffde\010\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\047\uffde\053" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\001\002" +
    "\000\040\007\uffe2\010\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\047\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\001\002\000\040\007\045\010" +
    "\060\024\064\025\057\026\054\027\053\030\063\031\055" +
    "\047\062\053\046\055\056\056\043\057\050\060\041\061" +
    "\052\001\002\000\040\007\uffdc\010\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\047\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000\030" +
    "\004\uffd4\005\uffd4\017\uffd4\022\uffd4\044\uffd4\046\072\047" +
    "\073\050\076\051\074\052\071\054\uffd4\001\002\000\030" +
    "\004\uffd3\005\uffd3\017\uffd3\022\uffd3\044\uffd3\046\072\047" +
    "\073\050\076\051\074\052\071\054\uffd3\001\002\000\016" +
    "\004\uffd7\005\uffd7\017\uffd7\022\uffd7\044\uffd7\054\uffd7\001" +
    "\002\000\010\004\166\005\170\017\220\001\002\000\004" +
    "\013\221\001\002\000\030\015\012\016\022\021\015\022" +
    "\023\023\031\032\020\060\014\062\024\063\032\064\030" +
    "\065\027\001\002\000\034\014\224\015\012\016\022\020" +
    "\223\021\015\022\023\023\031\032\020\060\014\062\024" +
    "\063\032\064\030\065\027\001\002\000\030\015\012\016" +
    "\022\021\015\022\023\023\031\032\020\060\014\062\024" +
    "\063\032\064\030\065\027\001\002\000\004\044\225\001" +
    "\002\000\036\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\032\uffc2\060\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\071\uffc2\001\002\000\032\014\227\015\012" +
    "\016\022\021\015\022\023\023\031\032\020\060\014\062" +
    "\024\063\032\064\030\065\027\001\002\000\004\044\230" +
    "\001\002\000\036\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\032\uffc3\060\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\071\uffc3\001\002\000\036\014\uffcb\015" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\032\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\071\uffcb\001" +
    "\002\000\040\007\045\010\060\024\064\025\057\026\054" +
    "\027\053\030\063\031\055\047\062\053\046\055\056\056" +
    "\043\057\050\060\041\061\052\001\002\000\016\045\234" +
    "\046\072\047\073\050\076\051\074\052\071\001\002\000" +
    "\040\007\045\010\060\024\064\025\057\026\054\027\053" +
    "\030\063\031\055\047\062\053\046\055\056\056\043\057" +
    "\050\060\041\061\052\001\002\000\016\046\072\047\073" +
    "\050\076\051\074\052\071\054\236\001\002\000\004\044" +
    "\uffbe\001\002\000\036\014\uffd0\015\uffd0\016\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\032\uffd0\060\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\071\uffd0\001\002\000\010\004\166" +
    "\005\170\022\165\001\002\000\040\007\045\010\060\024" +
    "\064\025\057\026\054\027\053\030\063\031\055\047\062" +
    "\053\046\055\056\056\043\057\050\060\041\061\052\001" +
    "\002\000\040\007\045\010\060\024\064\025\057\026\054" +
    "\027\053\030\063\031\055\047\062\053\046\055\056\056" +
    "\043\057\050\060\041\061\052\001\002\000\016\044\uffc4" +
    "\046\072\047\073\050\076\051\074\052\071\001\002\000" +
    "\020\045\247\046\072\047\073\050\076\051\074\052\071" +
    "\054\uffb7\001\002\000\004\054\246\001\002\000\004\044" +
    "\uffb9\001\002\000\040\007\045\010\060\024\064\025\057" +
    "\026\054\027\053\030\063\031\055\047\062\053\046\055" +
    "\056\056\043\057\050\060\041\061\052\001\002\000\004" +
    "\054\uffb8\001\002\000\004\002\uffb6\001\002\000\036\014" +
    "\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\032\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\071" +
    "\uffcf\001\002\000\004\053\254\001\002\000\004\060\255" +
    "\001\002\000\006\045\263\054\uffba\001\002\000\004\054" +
    "\257\001\002\000\004\013\260\001\002\000\030\015\012" +
    "\016\022\021\015\022\023\023\031\032\020\060\014\062" +
    "\024\063\032\064\030\065\027\001\002\000\032\015\012" +
    "\016\022\021\015\022\023\023\031\032\020\060\014\062" +
    "\024\063\032\064\030\065\027\071\262\001\002\000\004" +
    "\072\uffbd\001\002\000\004\060\255\001\002\000\004\054" +
    "\uffbb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\010\017\006\027\003\030\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\032\015\015\016" +
    "\012\020\033\021\025\022\034\023\024\024\016\026\020" +
    "\001\001\000\002\001\001\000\022\014\155\015\015\020" +
    "\033\021\025\022\034\023\024\024\016\026\020\001\001" +
    "\000\002\001\001\000\016\002\156\003\066\004\060\005" +
    "\237\006\046\007\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\156\003\066\004\060\005\216\006\046\007\043\001\001" +
    "\000\024\014\032\015\015\016\153\020\033\021\025\022" +
    "\034\023\024\024\016\026\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\041\003\050\004\060" +
    "\006\046\007\043\001\001\000\002\001\001\000\004\011" +
    "\074\001\001\000\014\002\127\003\066\004\060\006\046" +
    "\007\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\122\003\066\004\060\006\046\007\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\105\003\066\004\060\006\046\007" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\101\003\066\004\060\006\046\007" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\065\003\066\004\060\006\046\007\043\001\001\000" +
    "\004\011\074\001\001\000\002\001\001\000\014\002\077" +
    "\003\066\004\060\006\046\007\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\076\003\066\004\060\006\046\007\043\001" +
    "\001\000\002\001\001\000\004\011\074\001\001\000\004" +
    "\011\074\001\001\000\002\001\001\000\004\011\074\001" +
    "\001\000\014\002\103\003\066\004\060\006\046\007\043" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\004\011\074\001\001\000\014\002\107\003\066\004\060" +
    "\006\046\007\043\001\001\000\004\011\074\001\001\000" +
    "\014\002\111\003\066\004\060\006\046\007\043\001\001" +
    "\000\004\011\074\001\001\000\014\002\113\003\066\004" +
    "\060\006\046\007\043\001\001\000\004\011\074\001\001" +
    "\000\002\001\001\000\014\002\116\003\066\004\060\006" +
    "\046\007\043\001\001\000\004\011\074\001\001\000\014" +
    "\002\120\003\066\004\060\006\046\007\043\001\001\000" +
    "\004\011\074\001\001\000\002\001\001\000\004\011\074" +
    "\001\001\000\014\002\125\003\066\004\060\006\046\007" +
    "\043\001\001\000\002\001\001\000\004\011\074\001\001" +
    "\000\002\001\001\000\004\011\074\001\001\000\014\002" +
    "\131\003\066\004\060\006\046\007\043\001\001\000\004" +
    "\011\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\145\001\001\000\014\002\146" +
    "\003\066\004\060\006\046\007\043\001\001\000\002\001" +
    "\001\000\004\011\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\152\001\001\000\002\001\001\000" +
    "\022\014\155\015\015\020\033\021\025\022\034\023\024" +
    "\024\016\026\020\001\001\000\016\002\156\003\066\004" +
    "\060\005\163\006\046\007\043\001\001\000\002\001\001" +
    "\000\010\011\074\012\211\013\205\001\001\000\016\002" +
    "\156\003\066\004\060\005\215\006\046\007\043\001\001" +
    "\000\016\002\176\003\066\004\060\005\177\006\046\007" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\156\003\066\004" +
    "\060\005\171\006\046\007\043\001\001\000\002\001\001" +
    "\000\016\002\156\003\066\004\060\005\170\006\046\007" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\032\015\015\016\173\020\033\021\025\022\034\023" +
    "\024\024\016\026\020\001\001\000\022\014\155\015\015" +
    "\020\033\021\025\022\034\023\024\024\016\026\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\074" +
    "\012\211\013\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\214\003\066\004\060\006" +
    "\046\007\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\213\003\066\004\060\006" +
    "\046\007\043\001\001\000\002\001\001\000\004\011\074" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\032\015\015" +
    "\016\221\020\033\021\025\022\034\023\024\024\016\026" +
    "\020\001\001\000\022\014\155\015\015\020\033\021\025" +
    "\022\034\023\024\024\016\026\020\001\001\000\024\014" +
    "\032\015\015\016\225\020\033\021\025\022\034\023\024" +
    "\024\016\026\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\155\015\015\020\033\021\025\022\034" +
    "\023\024\024\016\026\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\232\003\066" +
    "\004\060\006\046\007\043\001\001\000\004\011\074\001" +
    "\001\000\014\002\234\003\066\004\060\006\046\007\043" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\243\003\066" +
    "\004\060\006\046\007\043\032\244\001\001\000\014\002" +
    "\242\003\066\004\060\006\046\007\043\001\001\000\004" +
    "\011\074\001\001\000\004\011\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\243\003\066\004\060" +
    "\006\046\007\043\032\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\032\015\015\016\260\020\033" +
    "\021\025\022\034\023\024\024\016\026\020\001\001\000" +
    "\022\014\155\015\015\020\033\021\025\022\034\023\024" +
    "\024\016\026\020\001\001\000\002\001\001\000\004\031" +
    "\263\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    private SymbolTable symbolTable = SymbolTable.getInstance();
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }

    public void report_error(String message, Object info) {
        //add a small delay to see the error message
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        StringBuilder m = new StringBuilder("Error");
        if (info != null && info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s != null && s.left >= 0) { // Ensure s is not null
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) { // Safely access s.right
                    m.append(", column " + (s.right + 1));
                }
        }
        } else if (info == null) {
            m.append(" : Null info object");
        } else if (info instanceof core.symbol.Symbol){
            core.symbol.Symbol s = (core.symbol.Symbol) info;
            m.append(" : " + s.getName() + " := " + s.getValue());
        }
        m.append(" : " + message);
        System.err.println(m);
    }

   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= tuple_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tuple_expr ::= LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new TupleExpression(e, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ConstIntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ConstStringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_expr ::= TRUE 
            {
              Expr RESULT =null;
		
                    RESULT = new ConstBooleanExpression(true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_expr ::= FALSE 
            {
              Expr RESULT =null;
		
                    RESULT = new ConstBooleanExpression(false);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BoolExpression2(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BoolExpression2(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_expr ::= INCREMENT expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrementExpression(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_expr ::= DECREMENT expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrementExpression(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new StrEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond_expr ::= SUPTRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond_expr ::= SUPFALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond_expr ::= LPAREN cond_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond_expr ::= NOT cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond_expr ::= cond_expr AND cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond_expr ::= cond_expr OR cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_instr ::= assign_stat SEMI 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_instr ::= output_stat SEMI 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_instr ::= fileoutput_stat SEMI 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_instr ::= EXIT SEMI 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruction ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruction ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruction ::= simple_instr 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruction ::= function_call SEMI 
            {
              SimpleInstruction RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleInstruction fc = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instructions ::= instructions instruction 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instructions ::= instruction 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assign_stat ::= INTEGER IDENT ASSIGN num_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // Aquí obtenemos el tipo del símbolo basado en la expresión
        SymbolType type;
        if (e instanceof IntExpression) {
            type = SymbolType.INTEGER;
        } else {
            type = SymbolType.OTHER;
        }       
        // Añadir el símbolo a la tabla
        symbolTable.put(i, e, type, false, null);

        RESULT = new AssignInstruction(i, e); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_stat ::= BOOLEAN IDENT ASSIGN bool_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // En este caso, aseguramos que sea una expresión booleana válida
        SymbolType type;
        if (e instanceof BoolExpression2 || e instanceof BooleanExpression) {
            type = SymbolType.BOOLEAN;
        } else {
            report_error("Invalid boolean assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false, null);

        RESULT = new AssignInstruction(i, e); 

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_stat ::= TUP IDENT ASSIGN tuple_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        SymbolType type;
        if (e instanceof TupleExpression) {
            type = SymbolType.TUPLE;
        } else {
            report_error("Invalid tuple assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false, null);
        
        RESULT = new AssignInstruction(i, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_stat ::= CONST IDENT ASSIGN const_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Comprobar si el identificador existe en la tabla de símbolos
        Symbol symbol = symbolTable.get(i.toString());
        if (symbol != null && symbol.isConstant()) {
            // Si ya existe, lanzar un error indicando que la constante ya fue definida
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        } else {
            // Si no existe, agregarlo a la tabla de símbolos como constante
            SymbolType type;
            if (e instanceof ConstIntExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstStringExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstBooleanExpression) {
                type = SymbolType.CONSTANT;
            } else {
                type = SymbolType.OTHER;
            }

            symbolTable.put(i.toString(), e, type, true, null);
        }
        RESULT = new AssignInstruction(i, e);

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    // ESTE VENDRÍA A SER UNA ASIGNACIÓN QUE NO TIENE VARIABLE
    // Comprobar si el identificador ya existe en la tabla de símbolos
    Symbol symbol = symbolTable.get(i);
    SymbolType type;

    if(e instanceof ID) {
        type = symbolTable.get(((ID) e).getName()).getType();
    } else if (e instanceof IntExpression) {
        type = SymbolType.INTEGER;
    } else if (e instanceof StringExpression) {
        type = SymbolType.STRING;
    } else if (e instanceof BooleanExpression || e instanceof BoolExpression2) {
        type = SymbolType.BOOLEAN;
    } else {
        type = SymbolType.OTHER;
    }

    if (symbol != null) {
        // Si el símbolo ya existe, comprobar si es constante
        if (symbol.isConstant()) {
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        }
        // Comprobar si el tipo del nuevo valor coincide con el tipo del símbolo existente
        if (symbol.getType() != type) {
            report_fatal_error("Type mismatch: cannot assign a value of type " + type + " to variable " + i + " of type " + symbol.getType() + ".", symbol);
            return null;
        }
        symbolTable.put(i,e,type,false, null);
        // Si el tipo coincide y no es constante, se permite la reasignación
    } else {
        // Si el símbolo no existe, agregarlo a la tabla de símbolos
        symbolTable.put(i, e, type, false, null);
    }

        RESULT = new AssignInstruction(i, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_stat ::= IF cond_expr THEN BEGIN instructions ELSE instructions END SEMI 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		InstructionList s = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList s2 = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new IfElseInstruction(c, s, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stat ::= IF cond_expr THEN BEGIN instructions END SEMI 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList s = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while_stat ::= WHILE cond_expr DO BEGIN instructions END SEMI 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList s = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_stat ::= DO instructions WHILE cond_expr SEMI 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		InstructionList s = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // output_stat ::= PRINT LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fileoutput_stat ::= FILEOUT LPAREN expr COMMA expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FileOutputInstruction(s, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fileoutput_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // functions ::= FUNC2 IDENT LPAREN params RPAREN BEGIN instructions ENDFUNC2 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<String> p = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Symbol functionSymbol = new Symbol(i, si, SymbolType.FUNCTION, false, p);
            functionSymbol.setParams(p);  // Guardamos los parámetros
            symbolTable.put(functionSymbol);
            
            RESULT = si;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // functions ::= 
            {
              InstructionList RESULT =null;
		
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // params ::= IDENT COMMA params 
            {
              List<String> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> p = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> paramList = new ArrayList<>();
            paramList.add(param);  // Añadir el primer parámetro
            paramList.addAll(p);   // Añadir el resto de los parámetros
            RESULT = paramList;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // params ::= IDENT 
            {
              List<String> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> paramList = new ArrayList<>();
            paramList.add(param);  // Sólo un parámetro
            RESULT = paramList;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_call ::= IDENT LPAREN args RPAREN 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Object> a = (List<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new FunctionCallInstruction(i, a);  // Pasamos los parámetros a la función
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // args ::= expr COMMA args 
            {
              List<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Object> a = (List<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         List<Object> arguments = new ArrayList<>();
         // Aquí asumimos que e tiene un método que devuelve su valor real
         if (e instanceof IntExpression) {
             arguments.add(((IntExpression)e).getValue());  // Accede al valor real del entero
         } else if (e instanceof BoolExpression2) {
             arguments.add(((BoolExpression2)e).getValue());  // Accede al valor real del booleano
         } else {
             arguments.add(e);  // Si no es una expresión conocida, se añade tal cual
         }
         arguments.addAll(a);  // Añadir los parámetros adicionales (también procesados de la misma forma)
         RESULT = arguments;
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // args ::= expr 
            {
              List<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         List<Object> arguments = new ArrayList<>();
         // Aquí también evaluamos el valor directamente
         if (e instanceof IntExpression) {
             arguments.add(((IntExpression)e).getValue());  // Valor real del entero
         } else if (e instanceof BoolExpression2) {
             arguments.add(((BoolExpression2)e).getValue());  // Valor real del booleano
         } else {
             arguments.add(e);  // Si no es una expresión conocida, se añade tal cual
         }
         RESULT = arguments;
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // main_instr ::= functions MAIN BEGIN instructions END 
            {
              MainInstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                MainInstructionList mainInstructions = new MainInstructionList(i);  
                RESULT = mainInstructions;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_instr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // program ::= main_instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainInstructionList i = (MainInstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Main(i);  // Devuelve una instancia de Main
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
