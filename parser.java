
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import core.symbol.SymbolTable;
import core.symbol.SymbolType;
import core.symbol.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\007\007\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\006\003\000\002\006\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\006\000\002\003\010\000\002\003\005\000\002" +
    "\003\004\000\002\003\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\010\000\002\004\012\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\023" +
    "\005\000\002\023\006\000\002\015\005\000\002\015\003" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\005\000\002\017\006\000\002" +
    "\017\010\000\002\020\006\000\002\020\006\000\002\021" +
    "\006\000\002\022\010\000\002\025\006\000\002\024\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\066\004\001\002\000\004\070\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\uffbb\001\002" +
    "\000\004\002\001\001\002\000\032\013\021\015\011\016" +
    "\020\021\014\022\022\023\030\032\017\060\012\062\023" +
    "\063\031\064\027\065\026\001\002\000\014\014\uffcd\020" +
    "\uffcd\021\uffcd\044\uffcd\067\uffcd\001\002\000\004\033\213" +
    "\001\002\000\014\014\uffcc\020\uffcc\021\uffcc\044\uffcc\067" +
    "\uffcc\001\002\000\046\006\157\007\046\010\061\011\161" +
    "\012\162\024\065\025\060\026\055\027\054\030\064\031" +
    "\056\047\063\053\160\055\057\056\044\057\051\060\042" +
    "\061\053\001\002\000\010\014\uffc8\044\uffc8\067\uffc8\001" +
    "\002\000\014\014\uffce\020\uffce\021\uffce\044\uffce\067\uffce" +
    "\001\002\000\004\053\224\001\002\000\046\006\157\007" +
    "\046\010\061\011\161\012\162\024\065\025\060\026\055" +
    "\027\054\030\064\031\056\047\063\053\160\055\057\056" +
    "\044\057\051\060\042\061\053\001\002\000\032\013\021" +
    "\015\011\016\020\021\014\022\022\023\030\032\017\060" +
    "\210\062\023\063\031\064\027\065\026\001\002\000\032" +
    "\013\021\015\011\016\020\021\014\022\022\023\030\032" +
    "\017\060\012\062\023\063\031\064\027\065\026\001\002" +
    "\000\004\060\151\001\002\000\014\014\uffcf\020\uffcf\021" +
    "\uffcf\044\uffcf\067\uffcf\001\002\000\014\014\uffd1\020\uffd1" +
    "\021\uffd1\044\uffd1\067\uffd1\001\002\000\004\060\144\001" +
    "\002\000\004\060\135\001\002\000\004\053\132\001\002" +
    "\000\004\060\040\001\002\000\014\014\uffd2\020\uffd2\021" +
    "\uffd2\044\uffd2\067\uffd2\001\002\000\006\044\035\067\036" +
    "\001\002\000\014\014\uffd0\020\uffd0\021\uffd0\044\uffd0\067" +
    "\uffd0\001\002\000\032\013\021\015\011\016\020\021\014" +
    "\022\022\023\030\032\017\060\012\062\023\063\031\064" +
    "\027\065\026\001\002\000\004\002\uffbc\001\002\000\010" +
    "\014\uffc9\044\uffc9\067\uffc9\001\002\000\004\033\041\001" +
    "\002\000\040\007\046\010\061\024\065\025\060\026\055" +
    "\027\054\030\064\031\056\047\063\053\047\055\057\056" +
    "\044\057\051\060\042\061\053\001\002\000\062\004\ufffb" +
    "\005\ufffb\014\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\054\ufffb\067\ufffb\001\002\000\014\046\073" +
    "\047\074\050\077\051\075\052\072\001\002\000\040\007" +
    "\046\010\061\024\065\025\060\026\055\027\054\030\064" +
    "\031\056\047\063\053\047\055\057\056\044\057\051\060" +
    "\042\061\053\001\002\000\062\004\ufff7\005\ufff7\014\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054" +
    "\ufff7\067\ufff7\001\002\000\062\004\ufff1\005\ufff1\014\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054" +
    "\ufff1\067\ufff1\001\002\000\040\007\046\010\061\024\065" +
    "\025\060\026\055\027\054\030\064\031\056\047\063\053" +
    "\047\055\057\056\044\057\051\060\042\061\053\001\002" +
    "\000\062\004\ufff8\005\ufff8\014\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\067\ufff8\001\002" +
    "\000\062\004\uffef\005\uffef\014\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\054\uffef\067\uffef\001\002" +
    "\000\026\014\uffc7\020\uffc7\021\uffc7\044\uffc7\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\067\uffc7\001\002\000\062" +
    "\004\uffe6\005\uffe6\014\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\054\uffe6\067\uffe6\001\002\000\062" +
    "\004\uffe5\005\uffe5\014\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\054\uffe5\067\uffe5\001\002\000\004" +
    "\053\117\001\002\000\004\053\110\001\002\000\040\007" +
    "\046\010\061\024\065\025\060\026\055\027\054\030\064" +
    "\031\056\047\063\053\047\055\057\056\044\057\051\060" +
    "\042\061\053\001\002\000\004\053\104\001\002\000\062" +
    "\004\ufff0\005\ufff0\014\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\054\ufff0\067\ufff0\001\002\000\062" +
    "\004\ufff9\005\ufff9\014\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\054\ufff9\067\ufff9\001\002\000\040" +
    "\007\046\010\061\024\065\025\060\026\055\027\054\030" +
    "\064\031\056\047\063\053\047\055\057\056\044\057\051" +
    "\060\042\061\053\001\002\000\004\053\066\001\002\000" +
    "\062\004\uffee\005\uffee\014\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\054\uffee\067\uffee\001\002\000" +
    "\040\007\046\010\061\024\065\025\060\026\055\027\054" +
    "\030\064\031\056\047\063\053\047\055\057\056\044\057" +
    "\051\060\042\061\053\001\002\000\016\045\071\046\073" +
    "\047\074\050\077\051\075\052\072\001\002\000\062\004" +
    "\ufffa\005\ufffa\014\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\054\ufffa\067\ufffa\001\002\000\040\007" +
    "\046\010\061\024\065\025\060\026\055\027\054\030\064" +
    "\031\056\047\063\053\047\055\057\056\044\057\051\060" +
    "\042\061\053\001\002\000\040\007\ufffc\010\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\047\ufffc\053" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\040\007\000\010\000\024\000\025\000\026\000\027" +
    "\000\030\000\031\000\047\000\053\000\055\000\056\000" +
    "\057\000\060\000\061\000\001\002\000\040\007\uffff\010" +
    "\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff" +
    "\047\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\001\002\000\040\007\ufffd\010\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\047\ufffd\053\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\001\002\000\040" +
    "\007\046\010\061\024\065\025\060\026\055\027\054\030" +
    "\064\031\056\047\063\053\047\055\057\056\044\057\051" +
    "\060\042\061\053\001\002\000\040\007\ufffe\010\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\047\ufffe" +
    "\053\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001" +
    "\002\000\062\004\uffe9\005\uffe9\014\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\073" +
    "\047\074\050\077\051\075\052\072\054\uffe9\067\uffe9\001" +
    "\002\000\016\046\073\047\074\050\077\051\075\052\072" +
    "\054\102\001\002\000\062\004\uffe4\005\uffe4\014\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\067\uffe4\001\002\000\062\004\uffed\005\uffed\014\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\077\051\075\052\072\054\uffed" +
    "\067\uffed\001\002\000\040\007\046\010\061\024\065\025" +
    "\060\026\055\027\054\030\064\031\056\047\063\053\047" +
    "\055\057\056\044\057\051\060\042\061\053\001\002\000" +
    "\016\046\073\047\074\050\077\051\075\052\072\054\106" +
    "\001\002\000\062\004\uffeb\005\uffeb\014\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\067\uffeb" +
    "\001\002\000\062\004\uffe8\005\uffe8\014\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\073\047\074\050\077\051\075\052\072\054\uffe8\067\uffe8" +
    "\001\002\000\040\007\046\010\061\024\065\025\060\026" +
    "\055\027\054\030\064\031\056\047\063\053\047\055\057" +
    "\056\044\057\051\060\042\061\053\001\002\000\016\045" +
    "\112\046\073\047\074\050\077\051\075\052\072\001\002" +
    "\000\040\007\046\010\061\024\065\025\060\026\055\027" +
    "\054\030\064\031\056\047\063\053\047\055\057\056\044" +
    "\057\051\060\042\061\053\001\002\000\016\045\114\046" +
    "\073\047\074\050\077\051\075\052\072\001\002\000\040" +
    "\007\046\010\061\024\065\025\060\026\055\027\054\030" +
    "\064\031\056\047\063\053\047\055\057\056\044\057\051" +
    "\060\042\061\053\001\002\000\016\046\073\047\074\050" +
    "\077\051\075\052\072\054\116\001\002\000\062\004\uffe3" +
    "\005\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\054\uffe3\067\uffe3\001\002\000\040\007\046" +
    "\010\061\024\065\025\060\026\055\027\054\030\064\031" +
    "\056\047\063\053\047\055\057\056\044\057\051\060\042" +
    "\061\053\001\002\000\016\045\121\046\073\047\074\050" +
    "\077\051\075\052\072\001\002\000\040\007\046\010\061" +
    "\024\065\025\060\026\055\027\054\030\064\031\056\047" +
    "\063\053\047\055\057\056\044\057\051\060\042\061\053" +
    "\001\002\000\016\046\073\047\074\050\077\051\075\052" +
    "\072\054\123\001\002\000\062\004\uffea\005\uffea\014\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054" +
    "\uffea\067\uffea\001\002\000\020\045\125\046\073\047\074" +
    "\050\077\051\075\052\072\054\126\001\002\000\040\007" +
    "\046\010\061\024\065\025\060\026\055\027\054\030\064" +
    "\031\056\047\063\053\047\055\057\056\044\057\051\060" +
    "\042\061\053\001\002\000\062\004\uffec\005\uffec\014\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054" +
    "\uffec\067\uffec\001\002\000\016\046\073\047\074\050\077" +
    "\051\075\052\072\054\130\001\002\000\062\004\ufff6\005" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\054\ufff6\067\ufff6\001\002\000\062\004\uffe7\005" +
    "\uffe7\014\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\073\047\074\050\077\051\075" +
    "\052\072\054\uffe7\067\uffe7\001\002\000\040\007\046\010" +
    "\061\024\065\025\060\026\055\027\054\030\064\031\056" +
    "\047\063\053\047\055\057\056\044\057\051\060\042\061" +
    "\053\001\002\000\016\046\073\047\074\050\077\051\075" +
    "\052\072\054\134\001\002\000\014\014\uffbe\020\uffbe\021" +
    "\uffbe\044\uffbe\067\uffbe\001\002\000\004\033\136\001\002" +
    "\000\012\007\141\010\143\057\137\061\140\001\002\000" +
    "\014\014\ufff5\020\ufff5\021\ufff5\044\ufff5\067\ufff5\001\002" +
    "\000\014\014\ufff4\020\ufff4\021\ufff4\044\ufff4\067\ufff4\001" +
    "\002\000\014\014\ufff3\020\ufff3\021\ufff3\044\ufff3\067\ufff3" +
    "\001\002\000\014\014\uffc4\020\uffc4\021\uffc4\044\uffc4\067" +
    "\uffc4\001\002\000\014\014\ufff2\020\ufff2\021\ufff2\044\ufff2" +
    "\067\ufff2\001\002\000\004\033\145\001\002\000\004\053" +
    "\146\001\002\000\040\007\046\010\061\024\065\025\060" +
    "\026\055\027\054\030\064\031\056\047\063\053\047\055" +
    "\057\056\044\057\051\060\042\061\053\001\002\000\014" +
    "\014\uffc5\020\uffc5\021\uffc5\044\uffc5\067\uffc5\001\002\000" +
    "\016\045\125\046\073\047\074\050\077\051\075\052\072" +
    "\001\002\000\004\033\152\001\002\000\006\007\046\010" +
    "\061\001\002\000\014\014\uffc6\020\uffc6\021\uffc6\044\uffc6" +
    "\067\uffc6\001\002\000\004\021\155\001\002\000\046\006" +
    "\157\007\046\010\061\011\161\012\162\024\065\025\060" +
    "\026\055\027\054\030\064\031\056\047\063\053\160\055" +
    "\057\056\044\057\051\060\042\061\053\001\002\000\034" +
    "\034\202\035\173\036\176\037\175\040\201\041\174\042" +
    "\204\043\200\046\073\047\074\050\077\051\075\052\072" +
    "\001\002\000\046\006\157\007\046\010\061\011\161\012" +
    "\162\024\065\025\060\026\055\027\054\030\064\031\056" +
    "\047\063\053\160\055\057\056\044\057\051\060\042\061" +
    "\053\001\002\000\046\006\157\007\046\010\061\011\161" +
    "\012\162\024\065\025\060\026\055\027\054\030\064\031" +
    "\056\047\063\053\160\055\057\056\044\057\051\060\042" +
    "\061\053\001\002\000\026\004\uffda\005\uffda\014\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\044\uffda\054\uffda\067\uffda" +
    "\001\002\000\026\004\uffd9\005\uffd9\014\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\044\uffd9\054\uffd9\067\uffd9\001\002" +
    "\000\020\004\164\005\165\014\uffbf\020\uffbf\021\uffbf\044" +
    "\uffbf\067\uffbf\001\002\000\046\006\157\007\046\010\061" +
    "\011\161\012\162\024\065\025\060\026\055\027\054\030" +
    "\064\031\056\047\063\053\160\055\057\056\044\057\051" +
    "\060\042\061\053\001\002\000\046\006\157\007\046\010" +
    "\061\011\161\012\162\024\065\025\060\026\055\027\054" +
    "\030\064\031\056\047\063\053\160\055\057\056\044\057" +
    "\051\060\042\061\053\001\002\000\026\004\uffd5\005\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\044\uffd5\054" +
    "\uffd5\067\uffd5\001\002\000\026\004\uffd6\005\uffd6\014\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\044\uffd6\054\uffd6\067" +
    "\uffd6\001\002\000\040\034\202\035\173\036\176\037\175" +
    "\040\201\041\174\042\204\043\200\045\125\046\073\047" +
    "\074\050\077\051\075\052\072\054\126\001\002\000\010" +
    "\004\164\005\165\054\172\001\002\000\026\004\uffd8\005" +
    "\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\044\uffd8" +
    "\054\uffd8\067\uffd8\001\002\000\040\007\uffe1\010\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\047\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\001" +
    "\002\000\040\007\uffdd\010\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\047\uffdd\053\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002\000\040\007\uffdf" +
    "\010\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\047\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\001\002\000\040\007\uffe0\010\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\047\uffe0\053\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000" +
    "\040\007\046\010\061\024\065\025\060\026\055\027\054" +
    "\030\064\031\056\047\063\053\047\055\057\056\044\057" +
    "\051\060\042\061\053\001\002\000\040\007\uffdb\010\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\047" +
    "\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\001\002\000\040\007\uffde\010\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\047\uffde\053\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\001\002\000\040\007" +
    "\uffe2\010\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\047\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\001\002\000\040\007\046\010\061\024\065" +
    "\025\060\026\055\027\054\030\064\031\056\047\063\053" +
    "\047\055\057\056\044\057\051\060\042\061\053\001\002" +
    "\000\040\007\uffdc\010\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\047\uffdc\053\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\001\002\000\040\004\uffd4\005" +
    "\uffd4\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\044\uffd4" +
    "\046\073\047\074\050\077\051\075\052\072\054\uffd4\067" +
    "\uffd4\001\002\000\040\004\uffd3\005\uffd3\014\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\044\uffd3\046\073\047\074\050" +
    "\077\051\075\052\072\054\uffd3\067\uffd3\001\002\000\026" +
    "\004\uffd7\005\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\044\uffd7\054\uffd7\067\uffd7\001\002\000\034\013\021" +
    "\015\011\016\020\021\014\022\022\023\030\032\017\033" +
    "\213\060\012\062\023\063\031\064\027\065\026\001\002" +
    "\000\006\014\212\044\035\001\002\000\014\014\uffcb\020" +
    "\uffcb\021\uffcb\044\uffcb\067\uffcb\001\002\000\040\007\046" +
    "\010\061\024\065\025\060\026\055\027\054\030\064\031" +
    "\056\047\063\053\047\055\057\056\044\057\051\060\042" +
    "\061\053\001\002\000\006\014\215\044\035\001\002\000" +
    "\014\014\uffca\020\uffca\021\uffca\044\uffca\067\uffca\001\002" +
    "\000\026\014\uffc3\020\uffc3\021\uffc3\044\uffc3\046\073\047" +
    "\074\050\077\051\075\052\072\067\uffc3\001\002\000\010" +
    "\004\164\005\165\017\220\001\002\000\032\013\021\015" +
    "\011\016\020\021\014\022\022\023\030\032\017\060\012" +
    "\062\023\063\031\064\027\065\026\001\002\000\014\014" +
    "\uffc2\020\222\021\uffc2\044\uffc2\067\uffc2\001\002\000\032" +
    "\013\021\015\011\016\020\021\014\022\022\023\030\032" +
    "\017\060\012\062\023\063\031\064\027\065\026\001\002" +
    "\000\014\014\uffc1\020\uffc1\021\uffc1\044\uffc1\067\uffc1\001" +
    "\002\000\040\007\046\010\061\024\065\025\060\026\055" +
    "\027\054\030\064\031\056\047\063\053\047\055\057\056" +
    "\044\057\051\060\042\061\053\001\002\000\016\045\226" +
    "\046\073\047\074\050\077\051\075\052\072\001\002\000" +
    "\040\007\046\010\061\024\065\025\060\026\055\027\054" +
    "\030\064\031\056\047\063\053\047\055\057\056\044\057" +
    "\051\060\042\061\053\001\002\000\016\046\073\047\074" +
    "\050\077\051\075\052\072\054\230\001\002\000\014\014" +
    "\uffbd\020\uffbd\021\uffbd\044\uffbd\067\uffbd\001\002\000\010" +
    "\004\164\005\165\022\232\001\002\000\032\013\021\015" +
    "\011\016\020\021\014\022\022\023\030\032\017\060\012" +
    "\062\023\063\031\064\027\065\026\001\002\000\014\014" +
    "\uffc0\020\uffc0\021\uffc0\044\uffc0\067\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\024\004\025\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\014\015\032\016\031\017\024\020\033\021" +
    "\023\022\015\023\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\155\003\067\004" +
    "\061\005\230\006\047\007\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\155\003" +
    "\067\004\061\005\216\006\047\007\044\001\001\000\022" +
    "\014\014\015\210\016\031\017\024\020\033\021\023\022" +
    "\015\023\012\001\001\000\020\014\153\016\031\017\024" +
    "\020\033\021\023\022\015\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\036\016\031\017\024\020\033\021\023\022\015\023" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\042\003\051\004\061\006\047\007" +
    "\044\001\001\000\002\001\001\000\004\011\075\001\001" +
    "\000\014\002\130\003\067\004\061\006\047\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\123" +
    "\003\067\004\061\006\047\007\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\106\003\067\004\061\006\047\007\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\102\003\067\004\061\006\047\007\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\066\003" +
    "\067\004\061\006\047\007\044\001\001\000\004\011\075" +
    "\001\001\000\002\001\001\000\014\002\100\003\067\004" +
    "\061\006\047\007\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\077\003\067\004\061\006\047\007\044\001\001\000\002" +
    "\001\001\000\004\011\075\001\001\000\004\011\075\001" +
    "\001\000\002\001\001\000\004\011\075\001\001\000\014" +
    "\002\104\003\067\004\061\006\047\007\044\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\004\011\075" +
    "\001\001\000\014\002\110\003\067\004\061\006\047\007" +
    "\044\001\001\000\004\011\075\001\001\000\014\002\112" +
    "\003\067\004\061\006\047\007\044\001\001\000\004\011" +
    "\075\001\001\000\014\002\114\003\067\004\061\006\047" +
    "\007\044\001\001\000\004\011\075\001\001\000\002\001" +
    "\001\000\014\002\117\003\067\004\061\006\047\007\044" +
    "\001\001\000\004\011\075\001\001\000\014\002\121\003" +
    "\067\004\061\006\047\007\044\001\001\000\004\011\075" +
    "\001\001\000\002\001\001\000\004\011\075\001\001\000" +
    "\014\002\126\003\067\004\061\006\047\007\044\001\001" +
    "\000\002\001\001\000\004\011\075\001\001\000\002\001" +
    "\001\000\004\011\075\001\001\000\014\002\132\003\067" +
    "\004\061\006\047\007\044\001\001\000\004\011\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\146\001\001\000\014\002\147\003\067\004" +
    "\061\006\047\007\044\001\001\000\002\001\001\000\004" +
    "\011\075\001\001\000\002\001\001\000\004\006\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\155" +
    "\003\067\004\061\005\162\006\047\007\044\001\001\000" +
    "\010\011\075\012\202\013\176\001\001\000\016\002\155" +
    "\003\067\004\061\005\206\006\047\007\044\001\001\000" +
    "\016\002\167\003\067\004\061\005\170\006\047\007\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\155\003\067\004\061\005\166\006\047" +
    "\007\044\001\001\000\016\002\155\003\067\004\061\005" +
    "\165\006\047\007\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\075\012\202\013\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\205\003\067\004\061\006\047\007\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\204\003\067\004\061\006\047\007\044\001\001\000\002" +
    "\001\001\000\004\011\075\001\001\000\004\011\075\001" +
    "\001\000\002\001\001\000\022\014\014\015\213\016\031" +
    "\017\024\020\033\021\023\022\015\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\215\003\067" +
    "\004\061\006\047\007\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\075\001\001\000\002\001\001" +
    "\000\020\014\220\016\031\017\024\020\033\021\023\022" +
    "\015\023\012\001\001\000\002\001\001\000\020\014\222" +
    "\016\031\017\024\020\033\021\023\022\015\023\012\001" +
    "\001\000\002\001\001\000\014\002\224\003\067\004\061" +
    "\006\047\007\044\001\001\000\004\011\075\001\001\000" +
    "\014\002\226\003\067\004\061\006\047\007\044\001\001" +
    "\000\004\011\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\232\016\031\017\024\020\033\021\023" +
    "\022\015\023\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    private SymbolTable symbolTable = new SymbolTable();

    public SymbolTable getSymbolTable() {
        return symbolTable;
    }

    public void report_error(String message, Object info) {
        //add a small delay to see the error message
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        StringBuilder m = new StringBuilder("Error");
        if (info != null && info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s != null && s.left >= 0) { // Ensure s is not null
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0) { // Safely access s.right
                    m.append(", column " + (s.right + 1));
                }
        }
        } else if (info == null) {
            m.append(" : Null info object");
        } else if (info instanceof core.symbol.Symbol){
            core.symbol.Symbol s = (core.symbol.Symbol) info;
            m.append(" : " + s.getName() + " := " + s.getValue());
        }
        m.append(" : " + message);
        System.err.println(m);
    }

   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= num_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= str_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= bool_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= tuple_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tuple_expr ::= LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new TupleExpression(e, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple_expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ConstIntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ConstStringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_expr ::= TRUE 
            {
              Expr RESULT =null;
		
                    RESULT = new ConstBooleanExpression(true);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_expr ::= FALSE 
            {
              Expr RESULT =null;
		
                    RESULT = new ConstBooleanExpression(false);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BoolExpression2(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BoolExpression2(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // num_expr ::= NUM 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExpression(e.intValue());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // num_expr ::= READINT 
            {
              Expr RESULT =null;
		
                    RESULT = new IntEnterExpression();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // num_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new UMinusExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // num_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new PIntExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // num_expr ::= LENGTH LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRLengthExpression(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // num_expr ::= POSITION LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new STRPositionExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // num_expr ::= expr num_op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OperatorExpression(e, o, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // num_expr ::= INCREMENT expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreIncrementExpression(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num_expr ::= DECREMENT expr 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PreDecrementExpression(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // str_expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new StringExpression(s.substring(1, s.length()-1));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // str_expr ::= READSTR 
            {
              Expr RESULT =null;
		
                    RESULT = new StrEnterExpression();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // str_expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ConcatStringExpression(s, s2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_expr ::= SUBSTRING LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr pos = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr length = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new SubStringExpression(s, pos, length);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new EqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new LtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new LeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new GtCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new GeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new NeCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // str_rel ::= STREQ 
            {
              Condition RESULT =null;
		 RESULT = new StrEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // str_rel ::= STRNOTEQ 
            {
              Condition RESULT =null;
		 RESULT = new StrNotEqCond(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond_expr ::= SUPTRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond_expr ::= SUPFALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond_expr ::= LPAREN cond_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond_expr ::= NOT cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond_expr ::= cond_expr AND cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond_expr ::= cond_expr OR cond_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond_expr ::= expr num_rel expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond_expr ::= expr str_rel expr 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(s, o, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_instr ::= fileoutput_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_instr ::= begin_end_instr 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_instr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // begin_end_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_end_instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // begin_end_instr ::= BEGIN IDENT instr END 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BeginEndInstructionId(si, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_end_instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instr ::= instr SEMI simple_instr 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(si); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instr ::= simple_instr 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstructionList(si); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_stat ::= INTEGER IDENT ASSIGN num_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // Aquí obtenemos el tipo del símbolo basado en la expresión
        SymbolType type;
        if (e instanceof IntExpression) {
            type = SymbolType.INTEGER;
        } else {
            type = SymbolType.OTHER;
        }       
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false);

        RESULT = new AssignInstruction(i, e); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_stat ::= BOOLEAN IDENT ASSIGN bool_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // En este caso, aseguramos que sea una expresión booleana válida
        SymbolType type;
        if (e instanceof BoolExpression2 || e instanceof BooleanExpression) {
            type = SymbolType.BOOLEAN;
        } else {
            report_error("Invalid boolean assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false);

        RESULT = new AssignInstruction(i, e); 

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_stat ::= TUP IDENT ASSIGN tuple_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        SymbolType type;
        if (e instanceof TupleExpression) {
            type = SymbolType.TUPLE;
        } else {
            report_error("Invalid tuple assignment", i);
            type = SymbolType.OTHER;
        }
        // Añadir el símbolo a la tabla
        symbolTable.put(i.toString(), e, type, false);
        
        RESULT = new AssignInstruction(i, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assign_stat ::= CONST IDENT ASSIGN const_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Comprobar si el identificador existe en la tabla de símbolos
        Symbol symbol = symbolTable.get(i.toString());
        if (symbol != null && symbol.isConstant()) {
            // Si ya existe, lanzar un error indicando que la constante ya fue definida
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        } else {
            // Si no existe, agregarlo a la tabla de símbolos como constante
            SymbolType type;
            if (e instanceof ConstIntExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstStringExpression) {
                type = SymbolType.CONSTANT;
            } else if (e instanceof ConstBooleanExpression) {
                type = SymbolType.CONSTANT;
            } else {
                type = SymbolType.OTHER;
            }

            symbolTable.put(i.toString(), e, type, true);
        }
        RESULT = new AssignInstruction(i, e);

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_stat ::= IDENT ASSIGN expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    // ESTE VENDRÍA A SER UNA ASIGNACIÓN QUE NO TIENE VARIABLE
    // Comprobar si el identificador ya existe en la tabla de símbolos
    Symbol symbol = symbolTable.get(i.toString());
    SymbolType type;

    if (e instanceof IntExpression) {
        type = SymbolType.INTEGER;
    } else if (e instanceof StringExpression) {
        type = SymbolType.STRING;
    } else if (e instanceof BooleanExpression) {
        type = SymbolType.BOOLEAN;
    } else {
        type = SymbolType.OTHER;
    }

    if (symbol != null) {
        // Si el símbolo ya existe, comprobar si es constante
        if (symbol.isConstant()) {
            report_fatal_error("Constant " + i + " is already defined.", symbol);
            return null;
        }
        // Comprobar si el tipo del nuevo valor coincide con el tipo del símbolo existente
        if (symbol.getType() != type) {
            report_fatal_error("Type mismatch: cannot assign a value of type " + type + " to variable " + i + " of type " + symbol.getType() + ".", symbol);
            return null;
        }
        // Si el tipo coincide y no es constante, se permite la reasignación
    } else {
        // Si el símbolo no existe, agregarlo a la tabla de símbolos
        symbolTable.put(i.toString(), e, type, false);
    }
        // Comprobar si el identificador existe en la tabla de símbolos
        RESULT = new AssignInstruction(i, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stat ::= IF cond_expr THEN simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_stat ::= IF cond_expr THEN simple_instr ELSE simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s2 = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IfElseInstruction(c, s, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_stat ::= WHILE cond_expr DO simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_stat ::= DO simple_instr WHILE cond_expr 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoWhileInstruction(c, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // output_stat ::= PRINT LPAREN expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OutputInstruction(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fileoutput_stat ::= FILEOUT LPAREN expr COMMA expr RPAREN 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FileOutputInstruction(s, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fileoutput_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // main_instr ::= FUNC MAIN instr ENDFUNC 
            {
              MainInstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new MainInstructionList(i);  
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_instr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // program ::= main_instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainInstructionList i = (MainInstructionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Main(i);  // Devuelve una instancia de Main
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
